# Multi-stage Docker build with distroless images for Nexus V3
# Optimized for security, performance, and minimal attack surface

# Build stage - Node.js application
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    curl

# Copy package files
COPY package*.json ./
COPY yarn.lock* ./

# Install dependencies with cache optimization
RUN --mount=type=cache,target=/root/.npm \
    --mount=type=cache,target=/root/.yarn \
    if [ -f yarn.lock ]; then yarn install --frozen-lockfile --production=false; \
    else npm ci --include=dev; fi

# Copy source code
COPY . .

# Build application
RUN npm run build

# Production dependencies stage
FROM node:18-alpine AS deps

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY yarn.lock* ./

# Install only production dependencies
RUN --mount=type=cache,target=/root/.npm \
    --mount=type=cache,target=/root/.yarn \
    if [ -f yarn.lock ]; then yarn install --frozen-lockfile --production=true; \
    else npm ci --omit=dev; fi

# Security scanning stage
FROM aquasec/trivy:latest AS security-scan

# Copy built application for security scanning
COPY --from=builder /app /scan-target

# Run security scan (will fail build if critical vulnerabilities found)
RUN trivy fs --exit-code 1 --severity HIGH,CRITICAL /scan-target

# Runtime stage - Distroless image
FROM gcr.io/distroless/nodejs18-debian11:nonroot AS runtime

# Set labels for metadata
LABEL maintainer="platform-team@nexus-v3.local" \
      version="1.0.0" \
      description="Nexus V3 Application - Distroless Runtime" \
      org.opencontainers.image.title="nexus-v3-app" \
      org.opencontainers.image.description="Enterprise application with distroless runtime" \
      org.opencontainers.image.version="1.0.0" \
      org.opencontainers.image.created="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
      org.opencontainers.image.source="https://github.com/appliedinnovationcorp/nexus-v3" \
      org.opencontainers.image.licenses="MIT"

# Set working directory
WORKDIR /app

# Copy production dependencies
COPY --from=deps --chown=nonroot:nonroot /app/node_modules ./node_modules

# Copy built application
COPY --from=builder --chown=nonroot:nonroot /app/dist ./dist
COPY --from=builder --chown=nonroot:nonroot /app/package.json ./

# Create non-root user directories
USER nonroot

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ["/nodejs/bin/node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]

# Start application
ENTRYPOINT ["/nodejs/bin/node", "dist/index.js"]

# Development stage for local development
FROM node:18-alpine AS development

WORKDIR /app

# Install development tools
RUN apk add --no-cache \
    git \
    curl \
    vim \
    bash

# Copy package files
COPY package*.json ./
COPY yarn.lock* ./

# Install all dependencies including dev dependencies
RUN --mount=type=cache,target=/root/.npm \
    --mount=type=cache,target=/root/.yarn \
    if [ -f yarn.lock ]; then yarn install --frozen-lockfile; \
    else npm ci; fi

# Copy source code
COPY . .

# Create non-root user for development
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 -G nodejs

USER nextjs

# Expose port
EXPOSE 3000

# Start development server
CMD ["npm", "run", "dev"]

# Testing stage for CI/CD
FROM builder AS testing

# Install testing dependencies
RUN apk add --no-cache \
    chromium \
    nss \
    freetype \
    freetype-dev \
    harfbuzz \
    ca-certificates \
    ttf-freefont

# Set Puppeteer to use installed Chromium
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser

# Run tests
RUN npm run test:unit
RUN npm run test:integration
RUN npm run test:e2e

# Generate test reports
RUN npm run test:coverage

# Nginx stage for static assets
FROM nginx:alpine AS nginx

# Copy custom nginx configuration
COPY containers/nginx/nginx.conf /etc/nginx/nginx.conf
COPY containers/nginx/default.conf /etc/nginx/conf.d/default.conf

# Copy static assets from builder
COPY --from=builder /app/dist/static /usr/share/nginx/html

# Create non-root user
RUN addgroup -g 101 -S nginx && \
    adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx

# Set proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d

# Switch to non-root user
USER nginx

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
