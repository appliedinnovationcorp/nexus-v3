input {
  beats {
    port => 5044
  }
  
  # Docker logs
  tcp {
    port => 5000
    codec => json_lines
  }
  
  # Application logs via HTTP
  http {
    port => 8080
    codec => json
  }
  
  # Syslog
  syslog {
    port => 514
  }
}

filter {
  # Parse timestamp
  if [timestamp] {
    date {
      match => [ "timestamp", "ISO8601" ]
    }
  }
  
  # Add monitoring metadata
  mutate {
    add_field => { "[@metadata][index]" => "logs" }
    add_field => { "monitoring_cluster" => "nexus-v3" }
  }
  
  # Parse JSON logs
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
    }
  }
  
  # Extract log level
  if [level] {
    mutate {
      uppercase => [ "level" ]
    }
  } else if [severity] {
    mutate {
      add_field => { "level" => "%{severity}" }
      uppercase => [ "level" ]
    }
  }
  
  # Parse container logs
  if [container] {
    mutate {
      add_field => { "[@metadata][index]" => "container-logs" }
    }
  }
  
  # Parse application logs
  if [service] or [app] {
    mutate {
      add_field => { "[@metadata][index]" => "app-logs" }
    }
  }
  
  # Parse error logs
  if [level] == "ERROR" or [level] == "FATAL" {
    mutate {
      add_field => { "[@metadata][index]" => "error-logs" }
      add_field => { "alert_required" => "true" }
    }
  }
  
  # Grok patterns for common log formats
  if [message] and ![parsed] {
    grok {
      match => { 
        "message" => [
          "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{GREEDYDATA:log_message}",
          "%{COMBINEDAPACHELOG}",
          "%{COMMONAPACHELOG}"
        ]
      }
      tag_on_failure => ["_grokparsefailure"]
    }
  }
  
  # Remove sensitive data
  mutate {
    remove_field => [ "password", "token", "secret", "key" ]
  }
}

output {
  # Send to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch-monitoring:9200"]
    index => "%{[@metadata][index]}-%{+YYYY.MM.dd}"
  }
  
  # Send alerts to monitoring system
  if [alert_required] == "true" {
    http {
      url => "http://alertmanager:9093/api/v1/alerts"
      http_method => "post"
      format => "json"
      mapping => {
        "alerts" => [{
          "labels" => {
            "alertname" => "LogAlert"
            "severity" => "warning"
            "service" => "%{service}"
            "level" => "%{level}"
          }
          "annotations" => {
            "summary" => "Log alert from %{service}"
            "description" => "%{message}"
          }
        }]
      }
    }
  }
  
  # Debug output (remove in production)
  stdout { 
    codec => rubydebug 
  }
}
