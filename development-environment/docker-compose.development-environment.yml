version: '3.8'

services:
  # Development Database with Production-like Data
  dev-postgres:
    image: postgres:15-alpine
    container_name: dev-postgres
    ports:
      - "5440:5432"
    environment:
      - POSTGRES_USER=dev_user
      - POSTGRES_PASSWORD=dev_password
      - POSTGRES_DB=nexus_dev
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - dev_postgres_data:/var/lib/postgresql/data
      - ./config/postgres/dev-postgresql.conf:/etc/postgresql/postgresql.conf
      - ./data/sample-data.sql:/docker-entrypoint-initdb.d/sample-data.sql
      - ./data/dev-fixtures.sql:/docker-entrypoint-initdb.d/dev-fixtures.sql
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - development-environment
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev_user -d nexus_dev"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Development Redis
  dev-redis:
    image: redis:7-alpine
    container_name: dev-redis
    ports:
      - "6390:6379"
    volumes:
      - dev_redis_data:/data
      - ./config/redis/dev-redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - development-environment
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Hot Module Replacement Server
  hmr-server:
    build:
      context: ./docker/hmr-server
      dockerfile: Dockerfile
    container_name: hmr-server
    ports:
      - "3400:3400"
      - "24678:24678"  # HMR WebSocket port
    environment:
      - NODE_ENV=development
      - HMR_PORT=24678
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    volumes:
      - ../apps:/workspace/apps
      - ../packages:/workspace/packages
      - hmr_cache:/workspace/node_modules/.cache
      - ./config/hmr:/workspace/config
    networks:
      - development-environment
    command: npm run dev:hmr

  # Development Proxy with SSL
  dev-proxy:
    image: nginx:alpine
    container_name: dev-proxy
    ports:
      - "3443:443"
      - "3080:80"
    volumes:
      - ./config/nginx/dev-nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/dev-sites:/etc/nginx/sites-enabled
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - hmr-server
    networks:
      - development-environment

  # Advanced Debugging Server
  debug-server:
    build:
      context: ./docker/debug-server
      dockerfile: Dockerfile
    container_name: debug-server
    ports:
      - "9229:9229"  # Node.js debugger
      - "9230:9230"  # Chrome DevTools
      - "3401:3401"  # Debug dashboard
    environment:
      - NODE_ENV=development
      - DEBUG=*
      - NODE_OPTIONS=--inspect=0.0.0.0:9229
    volumes:
      - ../apps:/workspace/apps
      - ../packages:/workspace/packages
      - ./config/debug:/workspace/config
      - debug_logs:/workspace/logs
    networks:
      - development-environment

  # Performance Profiling Service
  profiling-server:
    build:
      context: ./docker/profiling-server
      dockerfile: Dockerfile
    container_name: profiling-server
    ports:
      - "3402:3402"
      - "9222:9222"  # Chrome DevTools Protocol
    environment:
      - NODE_ENV=development
      - PROFILING_ENABLED=true
      - CHROME_DEVTOOLS_PORT=9222
    volumes:
      - ../apps:/workspace/apps
      - ../packages:/workspace/packages
      - profiling_data:/workspace/profiling
      - ./config/profiling:/workspace/config
    networks:
      - development-environment
    privileged: true

  # Development Data Seeder
  data-seeder:
    build:
      context: ./docker/data-seeder
      dockerfile: Dockerfile
    container_name: data-seeder
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://dev_user:dev_password@dev-postgres:5432/nexus_dev
      - REDIS_URL=redis://dev-redis:6379
      - SEED_MODE=development
    volumes:
      - ./data:/workspace/data
      - ./config/seeder:/workspace/config
      - seeder_logs:/workspace/logs
    depends_on:
      - dev-postgres
      - dev-redis
    networks:
      - development-environment

  # Code Server (VS Code in Browser)
  code-server:
    image: codercom/code-server:latest
    container_name: code-server
    ports:
      - "8080:8080"
    environment:
      - PASSWORD=dev-password
      - SUDO_PASSWORD=dev-password
    volumes:
      - ../:/home/coder/workspace
      - code_server_data:/home/coder/.local/share/code-server
      - ./vscode/settings.json:/home/coder/.local/share/code-server/User/settings.json
      - ./vscode/extensions:/home/coder/.local/share/code-server/extensions
    networks:
      - development-environment
    command: >
      --bind-addr 0.0.0.0:8080
      --auth password
      --disable-telemetry
      /home/coder/workspace

  # Development File Watcher
  file-watcher:
    build:
      context: ./docker/file-watcher
      dockerfile: Dockerfile
    container_name: file-watcher
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCH_EXTENSIONS=js,jsx,ts,tsx,css,scss,json,md
    volumes:
      - ../apps:/workspace/apps
      - ../packages:/workspace/packages
      - ./config/watcher:/workspace/config
      - watcher_logs:/workspace/logs
    networks:
      - development-environment

  # Development API Mock Server
  mock-server:
    build:
      context: ./docker/mock-server
      dockerfile: Dockerfile
    container_name: mock-server
    ports:
      - "3403:3403"
    environment:
      - NODE_ENV=development
      - MOCK_PORT=3403
    volumes:
      - ./config/mocks:/workspace/mocks
      - ./data/mock-responses:/workspace/responses
      - mock_logs:/workspace/logs
    networks:
      - development-environment

  # Development Environment Dashboard
  dev-dashboard:
    build:
      context: ./docker/dev-dashboard
      dockerfile: Dockerfile
    container_name: dev-dashboard
    ports:
      - "3404:3404"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://dev_user:dev_password@dev-postgres:5432/nexus_dev
      - REDIS_URL=redis://dev-redis:6379
    volumes:
      - ./config/dashboard:/workspace/config
      - dashboard_logs:/workspace/logs
    depends_on:
      - dev-postgres
      - dev-redis
      - hmr-server
      - debug-server
      - profiling-server
    networks:
      - development-environment

  # Development Elasticsearch for Logging
  dev-elasticsearch:
    image: elasticsearch:8.11.0
    container_name: dev-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - dev_elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - development-environment

  # Development Kibana for Log Analysis
  dev-kibana:
    image: kibana:8.11.0
    container_name: dev-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://dev-elasticsearch:9200
      - SERVER_NAME=dev-kibana
    depends_on:
      - dev-elasticsearch
    networks:
      - development-environment

  # Development Jaeger for Tracing
  dev-jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: dev-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "6831:6831/udp"  # UDP agent
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - development-environment

  # Development Mailhog for Email Testing
  dev-mailhog:
    image: mailhog/mailhog:latest
    container_name: dev-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - development-environment

  # Development MinIO for S3-compatible Storage
  dev-minio:
    image: minio/minio:latest
    container_name: dev-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=dev-access-key
      - MINIO_ROOT_PASSWORD=dev-secret-key
    volumes:
      - dev_minio_data:/data
    networks:
      - development-environment
    command: server /data --console-address ":9001"

  # Development Prometheus for Metrics
  dev-prometheus:
    image: prom/prometheus:latest
    container_name: dev-prometheus
    ports:
      - "9097:9090"
    volumes:
      - ./config/prometheus/dev-prometheus.yml:/etc/prometheus/prometheus.yml
      - dev_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    networks:
      - development-environment

  # Development Grafana for Monitoring
  dev-grafana:
    image: grafana/grafana:latest
    container_name: dev-grafana
    ports:
      - "3309:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=dev-password
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-clock-panel
    volumes:
      - dev_grafana_data:/var/lib/grafana
      - ./config/grafana/dev-provisioning:/etc/grafana/provisioning
      - ./config/grafana/dev-dashboards:/var/lib/grafana/dashboards
    networks:
      - development-environment

volumes:
  dev_postgres_data:
  dev_redis_data:
  hmr_cache:
  debug_logs:
  profiling_data:
  seeder_logs:
  code_server_data:
  watcher_logs:
  mock_logs:
  dashboard_logs:
  dev_elasticsearch_data:
  dev_minio_data:
  dev_prometheus_data:
  dev_grafana_data:

networks:
  development-environment:
    driver: bridge
