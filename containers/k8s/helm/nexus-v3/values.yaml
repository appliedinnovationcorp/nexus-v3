# Default values for nexus-v3 Helm chart
# Enterprise-grade configuration with security, scalability, and observability

# Global configuration
global:
  imageRegistry: harbor.nexus-v3.local
  imagePullSecrets:
    - name: harbor-registry-secret
  storageClass: "fast-ssd"
  
# Application configuration
app:
  name: nexus-v3
  version: "1.0.0"
  
image:
  repository: nexus-v3/nexus-v3-app
  tag: "1.0.0"
  pullPolicy: IfNotPresent
  
# Replica configuration
replicaCount: 3
minReplicas: 2
maxReplicas: 20

# Update strategy
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 1
    maxSurge: 2

# Pod configuration
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "3000"
  prometheus.io/path: "/metrics"
  
podLabels:
  app.kubernetes.io/name: nexus-v3
  app.kubernetes.io/component: application
  app.kubernetes.io/part-of: nexus-v3-platform

# Security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  fsGroup: 1001
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  capabilities:
    drop:
      - ALL
    add:
      - NET_BIND_SERVICE

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 3000
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: nexus-v3.local
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: nexus-v3-tls
      hosts:
        - nexus-v3.local

# Resource configuration
resources:
  limits:
    cpu: 1000m
    memory: 2Gi
    ephemeral-storage: 1Gi
  requests:
    cpu: 500m
    memory: 1Gi
    ephemeral-storage: 500Mi

# Horizontal Pod Autoscaler
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 20
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60
      selectPolicy: Max

# Vertical Pod Autoscaler
verticalPodAutoscaler:
  enabled: true
  updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
      - containerName: nexus-v3
        minAllowed:
          cpu: 100m
          memory: 128Mi
        maxAllowed:
          cpu: 2000m
          memory: 4Gi
        controlledResources:
          - cpu
          - memory

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1
  maxUnavailable: null

# Health checks
livenessProbe:
  httpGet:
    path: /health
    port: 3000
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  httpGet:
    path: /ready
    port: 3000
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3
  successThreshold: 2

startupProbe:
  httpGet:
    path: /health
    port: 3000
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30
  successThreshold: 1

# Environment variables
env:
  - name: NODE_ENV
    value: "production"
  - name: PORT
    value: "3000"
  - name: LOG_LEVEL
    value: "info"
  - name: METRICS_ENABLED
    value: "true"

# Environment variables from secrets
envFrom:
  - secretRef:
      name: nexus-v3-secrets
  - configMapRef:
      name: nexus-v3-config

# Volume mounts
volumeMounts:
  - name: tmp
    mountPath: /tmp
  - name: cache
    mountPath: /app/cache
  - name: logs
    mountPath: /app/logs

# Volumes
volumes:
  - name: tmp
    emptyDir: {}
  - name: cache
    emptyDir:
      sizeLimit: 1Gi
  - name: logs
    emptyDir:
      sizeLimit: 500Mi

# Persistent volumes
persistence:
  enabled: true
  storageClass: "fast-ssd"
  accessMode: ReadWriteOnce
  size: 10Gi
  annotations: {}

# Node selection
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity rules
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - nexus-v3
          topologyKey: kubernetes.io/hostname

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""
  automountServiceAccountToken: false

# RBAC
rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["configmaps", "secrets"]
      verbs: ["get", "list", "watch"]

# Network Policy
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 3000
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 3000
  egress:
    - to: []
      ports:
        - protocol: UDP
          port: 53
    - to:
        - namespaceSelector:
            matchLabels:
              name: database
      ports:
        - protocol: TCP
          port: 5432
    - to: []
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80

# Pod Security Policy
podSecurityPolicy:
  enabled: true
  name: nexus-v3-psp
  spec:
    privileged: false
    allowPrivilegeEscalation: false
    requiredDropCapabilities:
      - ALL
    allowedCapabilities:
      - NET_BIND_SERVICE
    volumes:
      - 'configMap'
      - 'emptyDir'
      - 'projected'
      - 'secret'
      - 'downwardAPI'
      - 'persistentVolumeClaim'
    hostNetwork: false
    hostIPC: false
    hostPID: false
    runAsUser:
      rule: 'MustRunAsNonRoot'
    supplementalGroups:
      rule: 'MustRunAs'
      ranges:
        - min: 1
          max: 65535
    fsGroup:
      rule: 'MustRunAs'
      ranges:
        - min: 1
          max: 65535
    readOnlyRootFilesystem: true
    seLinux:
      rule: 'RunAsAny'

# Service Monitor for Prometheus
serviceMonitor:
  enabled: true
  namespace: monitoring
  labels:
    app: nexus-v3
  interval: 30s
  scrapeTimeout: 10s
  path: /metrics
  port: http

# ConfigMap
configMap:
  enabled: true
  data:
    app.properties: |
      # Application configuration
      app.name=nexus-v3
      app.version=1.0.0
      app.environment=production
      
      # Logging configuration
      logging.level=info
      logging.format=json
      
      # Metrics configuration
      metrics.enabled=true
      metrics.port=3000
      metrics.path=/metrics

# Secrets (will be created externally)
secrets:
  enabled: false

# Database configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "postgres-password"
    username: "nexus"
    password: "nexus-password"
    database: "nexus_v3"
  primary:
    persistence:
      enabled: true
      size: 20Gi
      storageClass: "fast-ssd"
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# Redis configuration
redis:
  enabled: true
  auth:
    enabled: true
    password: "redis-password"
  master:
    persistence:
      enabled: true
      size: 5Gi
      storageClass: "fast-ssd"
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# Monitoring configuration
monitoring:
  prometheus:
    enabled: true
  grafana:
    enabled: true
    adminPassword: "admin-password"

# Service Mesh (Istio)
serviceMesh:
  enabled: true
  istio:
    enabled: true
    sidecarInjection: true
    virtualService:
      enabled: true
      hosts:
        - nexus-v3.local
      gateways:
        - nexus-v3-gateway
    destinationRule:
      enabled: true
      trafficPolicy:
        connectionPool:
          tcp:
            maxConnections: 100
          http:
            http1MaxPendingRequests: 50
            maxRequestsPerConnection: 10
        loadBalancer:
          simple: LEAST_CONN
        outlierDetection:
          consecutiveErrors: 3
          interval: 30s
          baseEjectionTime: 30s

# Backup configuration
backup:
  enabled: true
  schedule: "0 2 * * *"
  retention: "7d"
  storage:
    type: s3
    bucket: nexus-v3-backups
    region: us-west-2

# Maintenance configuration
maintenance:
  enabled: true
  schedule: "0 3 * * 0"
  tasks:
    - cleanup-logs
    - update-certificates
    - security-scan
